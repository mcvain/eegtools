Visualize:Property%20Sets matrix VisPropertySets= 0 1 // row titles are properties in the form "SRCD.Left", columns are property sets
System:Version matrix OperatorVersion= { Framework Revision Build Config Protocol } 1 3.6%20BETA.5711.1 5711.1,%202017-08-29T20:49:52Z MSVC-17.0.61030.0-AMD64,%20release,%202017-08-30T15:56:39Z,%20user@user-PC USE_DYNAMIC_CRT:OFF%20USE_OPENMP:ON%20USE_PRECOMPILED_HEADERS:ON%20USE_ASSERTS_IN_RELEASE_BUILDS:OFF 2.3 // operator module version information (noedit)(readonly)
System:Protocol int AutoConfig= 1 1 0 1 // Use AutoConfig protocol extension (boolean)
System:Protocol int OperatorBackLink= 1 1 0 1 // Send final state and signal information to Operator (boolean)
System:Core%20Connections string OperatorIP= 127.0.0.1 127.0.0.1 % % // the Operator module's IP (noedit)(readonly)
Source:Signal%20Properties:DataIOFilter int SourceCh= 16 // number of digitized and stored channels
Source:Signal%20Properties:DataIOFilter list SourceChOffset= 16 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 // Offset for channels in A/D units
Source:Signal%20Properties:DataIOFilter list SourceChGain= 16 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 // gain for each channel (A/D units per physical unit)
Source:Signal%20Properties:DataIOFilter int SampleBlockSize= 32 // number of samples transmitted at a time
Source:Signal%20Properties:DataIOFilter int SamplingRate= 250Hz // sampling rate
Source:Signal%20Properties:DataIOFilter list ChannelNames= 0 // list of channel names
Storage:Data%20Location:DataIOFilter string DataDirectory= C:/Users/helab/Desktop/BCI%20gtec%20testing ..\data % % // path to top level data directory (directory)
Storage:Session:DataIOFilter string SubjectName= Jee_20211027_LR_S1 Name % % // subject alias
Storage:Session:DataIOFilter string SubjectSession= 001 001 % % // three-digit session number
Storage:Session:DataIOFilter string SubjectRun= 00 00 % % // two-digit run number
Storage:Documentation:DataIOFilter string ID_System= % // BCI2000 System Code
Storage:Documentation:DataIOFilter string ID_Amp= % // BCI2000 Amp Code
Storage:Documentation:DataIOFilter string ID_Montage= % // BCI2000 Cap Montage Code
Visualize:Timing:DataIOFilter int VisualizeTiming= 1 1 0 1 // visualize system timing (0=no, 1=yes) (boolean)
Visualize:Source%20Signal:DataIOFilter int VisualizeSource= 1 1 0 1 // visualize raw brain signal (0=no, 1=yes) (boolean)
Visualize:Source%20Signal:DataIOFilter int VisualizeSourceDecimation= auto auto % % // decimation factor for raw brain signal
Visualize:Source%20Signal:DataIOFilter int VisualizeSourceBufferSize= auto auto % % // number of blocks to aggregate before sending to operator
Visualize:Source%20Signal:DataIOFilter int VisualizeSourceTime= 2s 2s 0 % // how much time in Source visualization
Visualize:Source%20Signal:DataIOFilter int SourceMin= auto // raw signal vis Min Value
Visualize:Source%20Signal:DataIOFilter int SourceMax= auto // raw signal vis Max Value
Source:Buffering:BufferedADC int SourceBufferSize= 2s 2s % % // size of data acquisition ring buffer (in blocks or seconds)
Source:Signal%20Properties:gNautilusADC string DeviceIDMaster= auto auto % % // deviceID for the device whose SYNC goes to the slaves
Source:Signal%20Properties:gNautilusADC list DeviceIDs= 1 auto // list of gNautilus to be used
Source:Signal%20Properties:gNautilusADC string HostIP= 127.0.0.1 %% % % // the server IP address
Source:Signal%20Properties:gNautilusADC int HostPort= 50223 1 % % // the server port
Source:Signal%20Properties:gNautilusADC string LocalIP= 127.0.0.1 // the local IP address
Source:Signal%20Properties:gNautilusADC int LocalPort= 50224 1 % % // the local port
Source:Signal%20Properties:gNautilusADC intlist RefChList= 0 % 0 256 // list of reference channels for each cap
Source:Signal%20Properties:gNautilusADC list SourceChList= 0 // list of cap.channel to acquire
Source:Signal%20Properties:gNautilusADC int FilterEnabled= 0 0 0 1 // Enable pass band filter (boolean)
Source:Signal%20Properties:gNautilusADC float FilterHighPass= 0.5 0.1 0 50 // high pass filter for pass band
Source:Signal%20Properties:gNautilusADC float FilterLowPass= 30 60 0 4000 // low pass filter for pass band
Source:Signal%20Properties:gNautilusADC int FilterModelOrder= 8 8 1 12 // filter model order for pass band
Source:Signal%20Properties:gNautilusADC int FilterType= 3 1 1 3 // pass band filter type: 1 Chebyshev, 2 Butterworth, 3 Bessel (enumeration)
Source:Signal%20Properties:gNautilusADC int NotchEnabled= 1 0 0 1 // Enable notch filter (boolean)
Source:Signal%20Properties:gNautilusADC float NotchHighPass= 58 58 0 70 // high pass filter for notch filter
Source:Signal%20Properties:gNautilusADC float NotchLowPass= 62 62 0 4000 // low pass filter for notch filter
Source:Signal%20Properties:gNautilusADC int NotchModelOrder= 4 4 1 10 // filter model order for notch filter
Source:Signal%20Properties:gNautilusADC int NotchType= 2 2 1 3 // pass band filter type: 1 Chebyshev, 2 Butterworth, 3 Bessel (enumeration)
Source:Signal%20Properties:gNautilusADC int EnableAccelerationData= 1 0 0 1 // enable acceleration data input (boolean)
Source:Signal%20Properties:gNautilusADC int EnableCounterInput= 1 0 0 1 // enable counter channel input (boolean)
Source:Signal%20Properties:gNautilusADC int EnableLinkQuality= 1 0 0 1 // enable link quality info input (boolean)
Source:Signal%20Properties:gNautilusADC int EnableBatteryLevel= 1 0 0 1 // enable battery level input (boolean)
Source:Signal%20Properties:gNautilusADC int EnableDigitalInputs= 1 0 0 1 // enable digital inputs (boolean)
Source:Signal%20Properties:gNautilusADC int EnableValidationIndicator= 1 0 0 1 // enable validation indicator input (boolean)
Storage:BCI2000FileWriter string FileFormat= dat // format of data file (readonly)
Storage:Documentation:BCI2000FileWriter string StorageTime= % // time of beginning of data storage
Source:Alignment:AlignmentFilter int AlignChannels= 1 0 0 1 // align channels in time (0=no, 1=yes)
Source:Alignment:AlignmentFilter floatlist SourceChTimeOffset= 0 0 % % // time offsets for all source channels (may be empty)
Source:Online%20Processing:TransmissionFilter list TransmitChList= 1 * // list of transmitted channels: Channel names may contain * and ? wildcards,  and character ranges enclosed in []; wildcard patterns may be negated by prepending an exclamation mark.  Ranges of channels may be specified using : or - to separate begin from end.
System:Protocol:EventLink int EventLink= 1 1 0 1 // Send events from Operator to Source module (boolean)
Storage:Data%20Location:RunManager string DataFile= $%7bSubjectName%7d$%7bSubjectSession%7d/$%7bSubjectName%7dS$%7bSubjectSession%7dR$%7bSubjectRun%7d.$%7bFileFormat%7d // name of data file relative to DataDirectory
System:Core%20Connections string OperatorAddress= 127.0.0.1:4002 // (noedit)
System:Core%20Connections string SignalSourceIP= 127.0.0.1 // (readonly)(noedit)
System:Core%20Connections string SignalSourcePort= 56544 // (readonly)(noedit)
System:Version matrix SignalSourceVersion= { Framework Revision Build Config Protocol } 1 3.6%20BETA.5711.1 5711.1,%202017-08-29T20:49:52Z MSVC-17.0.61030.0-AMD64,%20release,%202017-08-30T15:56:39Z,%20user@user-PC USE_DYNAMIC_CRT:OFF%20USE_OPENMP:ON%20USE_PRECOMPILED_HEADERS:ON%20USE_ASSERTS_IN_RELEASE_BUILDS:OFF 2.3 // SignalSource version information (noedit)(readonly)
System:Configuration matrix SignalSourceFilterChain= 8 { Filter%20Name Position%20String } DataIOFilter 0 gNautilusADC 1 NullFileWriter 1 BCI2000FileWriter 1 EDFFileWriter 1 GDFFileWriter 1 AlignmentFilter 1.1 TransmissionFilter 1.2 // SignalSource filter chain (noedit)(readonly)
System:Configuration matrix Filters= 16 1 /1/DataIOFilter /1/gNautilusADC /1/BCI2000FileWriter /1/AlignmentFilter /1/TransmissionFilter /2/SpatialFilter /2/ARFilter/WindowingFilter /2/ARFilter/ARSpectrum /2/LinearClassifier /2/LPFilter /2/ExpressionFilter /2/Normalizer /3/ConnectorInput /3/CursorFeedbackTask /3/KeystrokeFilter /3/ConnectorOutput // Filter Directory (noedit)(readonly)
Visualize:Processing%20Stages int VisualizeAlignmentFilter= 0 0 0 1 // Visualize AlignmentFilter output (boolean)
Visualize:Processing%20Stages int VisualizeTransmissionFilter= 0 0 0 1 // Visualize TransmissionFilter output (boolean)
Filtering:Windowing:WindowingFilter int WindowLength= 0.5s 0.5s % % // Length of window
Filtering:Windowing:WindowingFilter int Detrend= 1 0 0 2 // Detrend data? 0: no, 1: mean, 2: linear (enumeration)
Filtering:Windowing:WindowingFilter int WindowFunction= 0 0 0 3 // Window function 0: Rectangular, 1: Hamming, 2: Hann, 3: Blackman (enumeration)
Filtering:Spectral%20Estimation:ARSpectrum float FirstBinCenter= 0.5Hz 0Hz % % // Center of first frequency bin (in Hz)
Filtering:Spectral%20Estimation:ARSpectrum float LastBinCenter= 30.5Hz 30Hz % % // Center of last frequency bin (in Hz)
Filtering:Spectral%20Estimation:ARSpectrum float BinWidth= 5Hz 3Hz % % // Width of spectral bins (in Hz)
Filtering:Spectral%20Estimation:ARSpectrum int OutputType= 1 0 0 2 // 0: Spectral Amplitude, 1: Spectral Power, 2: Coefficients (enumeration)
Filtering:AR%20Spectral%20Estimator:ARSpectrum int ModelOrder= 16 16 0 % // AR model order
Filtering:AR%20Spectral%20Estimator:ARSpectrum int EvaluationsPerBin= 20 15 1 % // Number of uniformly spaced evaluation points entering into a single bin value
Filtering:SpatialFilter int SpatialFilterType= 2 2 0 3 // spatial filter type 0: none, 1: full matrix, 2: sparse matrix, 3: common average reference (CAR) (enumeration)
Filtering:SpatialFilter:SpatialFilter matrix SpatialFilter= 10 3 7 7 1 3 7 -0.25 6 7 -0.25 8 7 -0.25 11 7 -0.25 9 9 1 5 9 -0.25 8 9 -0.25 10 9 -0.25 13 9 -0.25 0 % % // columns represent input channels, rows represent output channels
Filtering:SpatialFilter:SpatialFilter intlist SpatialFilterCAROutput= 0 // when using CAR filter type: list of output channels, or empty for all channels
Filtering:SpatialFilter:SpatialFilter int SpatialFilterMissingChannels= 1 0 0 1 // how to handle missing channels 0: ignore, 1: report error (enumeration)
Filtering:LinearClassifier matrix Classifier= 2 { input%20channel input%20element%20(bin) output%20channel weight } 9 10.5Hz 1 1 7 10.5Hz 1 -1 // Linear classification matrix in sparse representation
Filtering:LPFilter float LPTimeConstant= 0 16s 0 % // time constant for the low pass filter
Filtering:ExpressionFilter string StartRunExpression= % // expression executed on StartRun
Filtering:ExpressionFilter string StopRunExpression= % // expression executed on StopRun
Filtering:ExpressionFilter matrix Expressions= 0 1 // expressions used to compute the output of the ExpressionFilter (rows are channels; empty matrix for none)
Filtering:Normalizer floatlist NormalizerOffsets= 2 0 0 0 % % // normalizer offsets
Filtering:Normalizer floatlist NormalizerGains= 2 0 0 0 % % // normalizer gain values
Filtering:Normalizer intlist Adaptation= 2 2 0 0 0 2 // 0: no adaptation, 1: zero mean, 2: zero mean, unit variance (enumeration)
Filtering:Normalizer matrix BufferConditions= 2 1 (Feedback)&&(TargetCode==1) (Feedback)&&(TargetCode==2) // expressions corresponding to data buffers (columns correspond to output channels, multiple rows correspond to multiple buffers)
Filtering:Normalizer float BufferLength= 30s 9s % % // time window of past data per buffer that enters into statistic
Filtering:Normalizer string UpdateTrigger= (Feedback==0) // expression to trigger offset/gain update when changing from 0 (use empty string for continuous update)
System:Core%20Connections string SignalProcessingIP= 127.0.0.1 // (readonly)(noedit)
System:Core%20Connections string SignalProcessingPort= 56571 // (readonly)(noedit)
System:Version matrix SignalProcessingVersion= { Framework Revision Build Config Protocol } 1 3.6%20BETA.5711.1 5711.1,%202017-08-29T20:49:52Z MSVC-17.0.61030.0-AMD64,%20release,%202017-08-30T15:56:39Z,%20user@user-PC USE_DYNAMIC_CRT:OFF%20USE_OPENMP:ON%20USE_PRECOMPILED_HEADERS:ON%20USE_ASSERTS_IN_RELEASE_BUILDS:OFF 2.3 // SignalProcessing version information (noedit)(readonly)
System:Configuration matrix SignalProcessingFilterChain= 6 { Filter%20Name Position%20String } SpatialFilter 2.B ARFilter 2.C LinearClassifier 2.D LPFilter 2.D1 ExpressionFilter 2.D2 Normalizer 2.E // SignalProcessing filter chain (noedit)(readonly)
Visualize:Processing%20Stages int VisualizeSpatialFilter= 0 0 0 1 // Visualize SpatialFilter output (boolean)
Visualize:Processing%20Stages int VisualizeARFilter= 0 0 0 1 // Visualize ARFilter output (boolean)
Visualize:Processing%20Stages int VisualizeLinearClassifier= 0 0 0 1 // Visualize LinearClassifier output (boolean)
Visualize:Processing%20Stages int VisualizeExpressionFilter= 0 0 0 1 // Visualize ExpressionFilter output (boolean)
Visualize:Processing%20Stages int VisualizeLPFilter= 0 0 0 1 // Visualize LPFilter output (boolean)
Visualize:Processing%20Stages int VisualizeNormalizer= 0 0 0 1 // Visualize Normalizer output (boolean)
Connector:ConnectorInput list ConnectorInputFilter= 0 // list of state names or signal elements to allow, "*" for any, signal elements as in "Signal(1,0)"
Connector:ConnectorInput string ConnectorInputAddress= % localhost:20320 % % // IP address/port to read from, e.g. localhost:20320
Application:Application%20Window:ApplicationWindow int WindowWidth= 1920 640 0 % // width of Application window
Application:Application%20Window:ApplicationWindow int WindowHeight= 1080 480 0 % // height of Application window
Application:Application%20Window:ApplicationWindow int WindowLeft= 50 0 % % // screen coordinate of Application window's left edge
Application:Application%20Window:ApplicationWindow int WindowTop= 0 0 % % // screen coordinate of Application window's top edge
Application:Application%20Window:ApplicationWindow string WindowBackgroundColor= 0x000000 0x505050 % % // Application window background color (color)
Application:Application%20Window:ApplicationWindow matrix WindowInfo= 1 1 auto // Application window information (readonly)(noedit)
Visualize:Application%20Window:ApplicationWindow int VisualizeApplicationWindow= 0 0 0 1 // Display miniature copy of Application window (boolean)
Visualize:Application%20Window:ApplicationWindow int AppWindowSpatialDecimation= 8 8 1 % // Application window decimation (shrinking) factor
Visualize:Application%20Window:ApplicationWindow int AppWindowTemporalDecimation= 4 16 1 % // Application window time decimation factor
Application:AudioPlayback:ApplicationWindow float AudioPlaybackRate= auto // audio playback sampling rate
Application:AudioPlayback:ApplicationWindow int AudioPlaybackChannels= auto // number of playback output channels
Application:AudioPlayback:ApplicationWindow float AudioPlaybackBufferDuration= auto // duration of playback buffer
Visualize:Application%20Log:ApplicationBase int ShowAppLog= 1 0 0 1 // Show application log window (boolean)
Application:Sequencing:FeedbackTask float PreRunDuration= 5s 2s 0 % // duration of pause preceding first trial
Application:Sequencing:FeedbackTask float PreFeedbackDuration= 2s 2s 0 % // duration of target display prior to feedback
Application:Sequencing:FeedbackTask float FeedbackDuration= 3s 3s 0 % // duration of feedback
Application:Sequencing:FeedbackTask float PostFeedbackDuration= 1s 1s 0 % // duration of result display after feedback
Application:Sequencing:FeedbackTask float ITIDuration= 3s 1s 0 % // duration of inter-trial interval
Application:Sequencing:FeedbackTask float MinRunLength= % 120s 0 % // minimum duration of a run; if blank, NumberOfTrials is used
Application:Sequencing:FeedbackTask int NumberOfTrials= 24 0 0 % // number of trials; if blank, MinRunLength is used
Application:Targets:FeedbackTask int NumberTargets= 2 2 0 255 // number of targets
Application:Targets:FeedbackTask intlist TargetSequence= 0 1 % % // fixed sequence in which targets should be presented (leave empty for random)
Application:Window:CursorFeedbackTask int RenderingQuality= 0 0 0 1 // rendering quality: 0: low, 1: high (enumeration)
Application:Sequencing:CursorFeedbackTask float MaxFeedbackDuration= 6s % 0 % // abort a trial after this amount of feedback time has expired
Application:3DEnvironment:CursorFeedbackTask floatlist CameraPos= 3 50 50 150 // camera position vector in percent coordinates of 3D area
Application:3DEnvironment:CursorFeedbackTask floatlist CameraAim= 3 50 50 50 // camera aim point in percent coordinates
Application:3DEnvironment:CursorFeedbackTask int CameraProjection= 0 0 0 2 // projection type: 0: flat, 1: wide angle perspective, 2: narrow angle perspective (enumeration)
Application:3DEnvironment:CursorFeedbackTask floatlist LightSourcePos= 3 50 50 150 // light source position in percent coordinates
Application:3DEnvironment:CursorFeedbackTask int LightSourceColor= 0xFFFFFF // light source RGB color (color)
Application:3DEnvironment:CursorFeedbackTask int WorkspaceBoundaryColor= 0x000000 0 % % // workspace boundary color (0xff000000 for invisible) (color)
Application:3DEnvironment:CursorFeedbackTask string WorkspaceBoundaryTexture= images/grid.bmp // path of workspace boundary texture (inputfile)
Application:Cursor:CursorFeedbackTask float CursorWidth= 10 10 0.0 % // feedback cursor width in percent of screen width
Application:Cursor:CursorFeedbackTask int CursorColorFront= 0xFF8080 // cursor color when it is at the front of the workspace (color)
Application:Cursor:CursorFeedbackTask int CursorColorBack= 0xFF8080 // cursor color when it is in the back of the workspace (color)
Application:Cursor:CursorFeedbackTask string CursorTexture= images/marble.bmp // path of cursor texture (inputfile)
Application:Cursor:CursorFeedbackTask floatlist CursorPos= 3 50 50 50 // cursor starting position
Application:Targets:CursorFeedbackTask matrix Targets= 4 { pos%20x pos%20y pos%20z width%20x width%20y width%20z } 96 50 50 8 50 8 4 50 50 8 50 8 96 50 50 8 50 8 4 50 50 8 50 8 // target positions and widths in percentage coordinates
Application:Targets:CursorFeedbackTask int TargetColor= 0xFFFF00 // target color (color)
Application:Targets:CursorFeedbackTask string TargetTexture= % // path of target texture (inputfile)
Application:Targets:CursorFeedbackTask int TestAllTargets= 1 0 0 1 // test all targets for cursor collision? 0: test only the visible current target, 1: test all targets (enumeration)
Application:Human%20Interface%20Devices:KeystrokeFilter string KeystrokeStateName= % // State to be translated into keystrokes (0-F), empty for off
Application:Human%20Interface%20Devices:KeystrokeFilter string KeystrokeExpression= % // Expression that evaluates to a virtual keycode, empty for off
Application:Human%20Interface%20Devices:KeystrokeFilter string KeystrokeExpressionOnStartRun= % // Expression that initializes expression variables on StartRun
Connector:ConnectorOutput string ConnectorOutputAddress= % localhost:20321 % % // one or more IP:Port combinations, e.g. localhost:20321
Application:Localization:Localization string Language= Default Default % % // Language for user messages
Application:Localization:Localization matrix LocalizedStrings= { German } { Timeout Be%20prepared%20... } Inaktiv Achtung%20... // Localized user messages
System:Core%20Connections string ApplicationIP= 127.0.0.1 // (readonly)(noedit)
System:Core%20Connections string ApplicationPort= 56589 // (readonly)(noedit)
System:Version matrix ApplicationVersion= { Framework Revision Build Config Protocol } 1 3.6%20BETA.5711.1 5711.1,%202017-08-29T20:49:52Z MSVC-17.0.61030.0-AMD64,%20release,%202017-08-30T15:56:39Z,%20user@user-PC USE_DYNAMIC_CRT:OFF%20USE_OPENMP:ON%20USE_PRECOMPILED_HEADERS:ON%20USE_ASSERTS_IN_RELEASE_BUILDS:OFF 2.3 // Application version information (noedit)(readonly)
System:Configuration matrix ApplicationFilterChain= 4 { Filter%20Name Position%20String } ConnectorInput 2.9999 CursorFeedbackTask 3 KeystrokeFilter 3.1 ConnectorOutput 3.9999 // Application filter chain (noedit)(readonly)
System:Randomization int RandomSeed= 15319 0 % % // seed for the BCI2000 pseudo random number generator (readonly)
System:Randomization int RandomizationWarning= 1 1 0 1 // warn if subsequent Runs have identical RandomSeed value (boolean)
System:State%20Vector int StateVectorLength= 40 16 % % // length of the state vector in bytes (noedit)(readonly)
